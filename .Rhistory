}
View(bvcore)
plot(bvcore[, 2])
plot(bvcore[ , 2], type='l')
plot(bvcore[ , 2], type='l', col='blue')
plot(bvcore[ , 2], type='l',
col='blue', ylab='Returns of IBOVESPA',
)
plot(bvcore[ , 2], type='l',
col='blue', ylab='Returns of IBOVESPA',
main='Evolution of Ibovespa returns')
shapiro.test(bvcore[ , 2])
View(bvcore)
plot(bvcore[ , 2], dates, type='l',
col='blue', ylab='Returns of IBOVESPA',
main='Evolution of Ibovespa returns')
plot(dates,bvcore[ , 2], type='l',
col='blue', ylab='Returns of IBOVESPA',
main='Evolution of Ibovespa returns')
hist(bvcore[ , 2])
hist(bvcore[ , 2], col = 'lightblue')
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns')
shapiro.test(bvcore[ , 2])
shapiro.test(bvcore[ , 2]) #The null-hypothesis of this test is that the population is normally distributed.
jarque.bera.test(bvcore[ , 2])
jarque.bera.test(omit.na(bvcore[ , 2]))
jarque.bera.test(na.omit(bvcore[ , 2]))
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns')curve(dnorm(x),add=T)
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns')
curve(dnorm(x),add=T)
hist(rnorm(1000))
curve(dnorm(x),add=T)
hist(rnorm(1000))
curve(dnorm(x),add=T)
hist(rnorm(1000), ylim=c(0,0.5))
curve(dnorm(x),add=T)
hist(rnorm(1000), probability = T)
curve(dnorm(x),add=T)
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns', probability = T)
curve(dnorm(x),add=T)
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns')
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns', density = T)
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns', probability = T)
curve(dnorm(x),add=T)
basicStats(bvcore[ , 2])
t.test(bvcore[ , 2], mu=0)
adf.test(bvcore[ , 2])
adf.test(na.omit(bvcore[ , 2]))
adf.test(na.omit(bvcore[ , 2]) )
bvcore[ , 2] = ifelse(is.na(bvcore[ , 2]), mean(bvcore[ , 2], na.rm=T ), bvcore[ , 2])
View(bvcore)
basicStats(bvcore[ , 2])
vol = garchFit(bvcore[ , 2] ~garch(1, 1), trace = FALSE)
summary(vol)
basicStats(bvcore[ , 2])
summary(vol)
fit =  fitted(vol)
plot(fit, type='l', col='blue', ylab='Volatilidade',
main='Volatilidade do IBOV usando o GARCH(1,1)')
plot(fit, type='l', col='blue', ylab='Volatilidade',
main='IBOV volatility using GARCH(1,1)')
ar = auto.arima(bvcore[ , 2], lambda = 'auto')
fit = forecast(ar, h=10)
plot(fit)
ar = auto.arima(bvcore[ , 2], lambda = 'auto')
fit = forecast(ar, h=30)
plot(fit)
library(mFilter)
filt = hpfilter(bvcore[ , 2])
filt = hpfilter(bvcore[ , 2], freq = 1600)
plot(filt)
#----------- ARIMA
acf(bvcore[ , 2])
pacf(bvcore[ , 2])
par(mfrow=c(1,2))
acf(bvcore[ , 2])
pacf(bvcore[ , 2])
acf(bvcore[ , 2], main='Return IBOV')
#----------- ARIMA
par(mfrow=c(1,2))
acf(bvcore[ , 2], main='Autocorrelation of IBOV returns')
pacf(bvcore[ , 2], main='Partial autocorrelation of IBOV returns')
#----------- ARIMA
window()
#----------- ARIMA
windows()
windows()
par(mfrow=c(1,2))
acf(bvcore[ , 2], main='Autocorrelation of IBOV returns')
pacf(bvcore[ , 2], main='Partial autocorrelation of IBOV returns')
ar = auto.arima(bvcore[ , 2], lambda = 'auto')
ar
54.5+543.95
54.5+543.95+1.55
setwd("D:/Git projects/ML in R")
library(rpart)
library(rpart.plot)
df = read.csv('naive_base.csv')
clas = rpart(formula = risco~ ., data=df, control = rpart.control(minbucket = 1))
rpart.plot(clas)
historia = c('boa', 'ruim')
divida = c('alta', 'alta')
garantias = c('nenhuma', 'adequada')
renda = c('acima_35', '0_15')
df2 = data.frame(historia, divida, garantias, renda)
prev = predict(clas, newdata=df2)
prev
prev
setwd("D:/Git projects/ML in R")
#---------------------------------------------------------------------------------
#                             DECISION TREES
#---------------------------------------------------------------------------------
setwd("D:/Git projects/ML in R")
library(rpart)
library(rpart.plot)
# data
#---------------------------------------------------------------------------------
#                             DECISION TREES
#---------------------------------------------------------------------------------
setwd("D:/Git projects/ML in R")
library(rpart)
library(rpart.plot)
# data
df = read.csv('credit.csv')
df$clientid = NULL
attach(df)
# drop na values
m_age = mean(age[age>0 ], na.rm = T)  # average without considering negative values
df$age = ifelse(df$age < 0 |is.na(df$age) , m_age, df$age)
# scaling data
df[, 1:3] = scale(df[, 1:3])
# Encode class
df$default = factor(df$default, levels = c(0,1))
# train and test
set.seed(1)
div = sample.split(df$income, SplitRatio = 0.75)
df_train = subset(df, div == TRUE)
df_test = subset(df, div == FALSE)
library(caTools)
set.seed(1)
div = sample.split(df$income, SplitRatio = 0.75)
df_train = subset(df, div == TRUE)
df_test = subset(df, div == FALSE)
clas = rpart(formula = default~., data = df_train)
clas
rpart.plot(clas)
prev = predict(clas, newdata = df_test[-4])
clas
View(prev)
prev = predict(clas, newdata = df_test[-4], type='class') # get the class
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
library(caret)    #provide metrics for confusion matrix
confusionMatrix(conf_matrix)
base = read.csv('census.csv')
base$X = NULL
base$sex = factor(base$sex, levels = unique(base$sex), labels = c(1, 0))
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
#---------------- SCALING
base[ , 1] = scale(base[ , 1])
base[ , 3] = scale(base[ , 3])
base[ , 5] = scale(base[ , 5])
base[ , 11:13] = scale(base[ , 11:13])
#----------------------- TRAIN AND TEST
set.seed(1)
div = sample.split(base$income, SplitRatio = 0.85)
base_train = subset(base, div == T)
base_test = subset(base, div == F)
clas = rpart(formula=income ~ ., base_train)
clas = rpart(formula=income ~ ., data = base_train)
rpart.plot(clas)
View(base_test)
prev = predict(clas, newdata = base_test)
View(prev)
prev = predict(clas, newdata = base_test, type = 'class')
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
df = read.csv(file.choose())
df = read.excel(file.choose())
library(readxl)
tax_revenue <- read_excel("C:/Users/user/Downloads/tax_revenue.xls")
View(tax_revenue)
df = read_excel(file.choose())
View(df)
df = read_excel(file.choose())
View(df)
View(df)
seq(1980, 2018, 1)
tax = reshape(data = df,
idvar= c("CountryCode",'CountryName')
varying = 3:41,
sep= "",
timevar= "year",
times =seq(1980, 2018, 1),
new.row.names= 1:10000,
direction = "long")
tax = reshape(data = df,
idvar= c('Country Code','Country Name')
varying = 3:41,
sep= "",
timevar= "year",
times =seq(1980, 2018, 1),
new.row.names= 1:10000,
direction = "long")
tax = reshape(data = df,
idvar= c('Country Code','Country Name'),
varying = 3:41,
sep= "",
timevar= "year",
times =seq(1980, 2018, 1),
new.row.names= 1:10000,
direction = "long")
tax = reshape(data = df,
idvar= c('Country Code','Country Name'),
varying = 3:41,
sep= "",
timevar= "year",
times =seq(1980, 2018, 1),
#new.row.names= 1:10000,
direction = "long")
View(tax)
View(tax)
tax = reshape(data = df,
idvar= c('Country Code','Country Name'),
varying = 3:41,
sep= "",
timevar= "year",
times =seq(1980, 2018, 1),
new.row.names= 1:10296,
direction = "long")
View(tax)
tax = tax[order(tax$`Country Name`), ]
View(tax)
tax = tax[order(tax$Country Name), ]
tax = tax[order(tax$`Country Name`), ]
attach(tax)
View(tax)
summary(tax)
summary(tax$tax)
filt1 = `Country Code`==BRA
filt1 = `Country Code`=='BRA'
tax[filt1, ]
filt1 = `Country Code`==c('BRA', 'RUS')
tax[filt1, ]
tax[filt1, ]
data = tax[filt1, ]
View(data)
View(tax)
filt1 = `Country Code`==c('BRA', 'RUS', 'CHN', 'IND', 'ZAF')
data = tax[filt1, ]
View(data)
filt1 = `Country Code`== c('BRA', 'RUS', 'CHN', 'IND', 'ZAF')
filt2 = `Country Code`== c('BRA', 'RUS', 'CHN', 'IND', 'ZAF')
rm(filt2)
filt2 = tax$`Country Code`== c('BRA', 'RUS', 'CHN', 'IND', 'ZAF')
rm(filt2)
filt1 = tax$`Country Code`== c('BRA', 'RUS', 'CHN', 'IND', 'ZAF')
data = tax[filt1, ]
View(data)
filt1 = tax$`Country Code`== c('BRA', 'RUS', 'CHN')
data = tax[filt1, ]
View(data)
filt1 = tax$`Country Code`== c('BRA', 'RUS', 'CHN') & tax$year
data = tax[filt1, ]
View(data)
filt1 = tax$`Country Code`== c('BRA') & tax$year
data = tax[filt1, ]
View(data)
filt1 = tax$`Country Code`== 'BRA', 'ZAF'
filt1 = tax$`Country Code`== ('BRA', 'ZAF')
filt1 = tax$`Country Code`== c('BRA', 'RUS', 'CHN') & tax$year == seq(1980, 2018, 1)
data = tax[filt1, ]
View(data)
View(tax)
filt1 = tax$`Country Code`== c('AFG', 'ALB') & tax$year == seq(1980, 2018, 1)
data = tax[filt1, ]
View(data)
View(filt1)
tax[1, ]
tax[2, ]
tax[2:4, ]
filt1 = tax$`Country Code`== 'AFG' & tax$`Country Code`== 'BRA'
data = tax[filt1, ]
View(data)
filt1 = tax$`Country Code`== 'AFG' | tax$`Country Code`== 'BRA'
data = tax[filt1, ]
View(data)
filt1 = tax$`Country Code`== 'CHN' | tax$`Country Code`== 'BRA' | tax$`Country Code`== 'ZAF' | tax$`Country Code`== 'IND' | tax$`Country Code`== 'RUS'
data = tax[filt1, ]
View(data)
filt2 = year > = 1990
filt2 = year =>  1990
filt2 = year >=  1990
data = tax[filt1, filt2]
filt1 = tax$`Country Code`== 'CHN' | tax$`Country Code`== 'BRA' | tax$`Country Code`== 'ZAF' | tax$`Country Code`== 'IND' | tax$`Country Code`== 'RUS' & year >=  1990
rm(filt2)
data = tax[filt1,  ]
View(data)
View(data)
filt1 = tax$`Country Code`== 'CHN' | tax$`Country Code`== 'BRA' | tax$`Country Code`== 'ZAF' | tax$`Country Code`== 'IND' | tax$`Country Code`== 'RUS' & tax$year >=  1990
data = tax[filt1,  ]
View(data)
filt1 = tax$`Country Code`== 'CHN' | tax$`Country Code`== 'BRA' | tax$`Country Code`== 'ZAF' | tax$`Country Code`== 'IND' | tax$`Country Code`== 'RUS' & tax$year>=1990
filt1 = tax$`Country Code`== 'CHN' | tax$`Country Code`== 'BRA' | tax$`Country Code`== 'ZAF' | tax$`Country Code`== 'IND' | tax$`Country Code`== 'RUS' & tax$year>=1990
filt1 = tax$`Country Code`== 'CHN' | tax$`Country Code`== 'BRA' | tax$`Country Code`== 'ZAF' | tax$`Country Code`== 'IND' | tax$`Country Code`== 'RUS' & tax$year>=1990
filt1 = tax$`Country Code`== 'CHN' | tax$`Country Code`== 'BRA' | tax$`Country Code`== 'ZAF' | tax$`Country Code`== 'IND' | tax$`Country Code`== 'RUS' & tax$year>=1990
filt1 = tax$`Country Code`== 'CHN' | tax$`Country Code`== 'BRA' | tax$`Country Code`== 'ZAF' | tax$`Country Code`== 'IND' | tax$`Country Code`== 'RUS' & tax$year>=1990
filt1 = tax$`Country Code`== 'CHN' | tax$`Country Code`== 'BRA' | tax$`Country Code`== 'ZAF' | tax$`Country Code`== 'IND' | tax$`Country Code`== 'RUS' & tax$year>=1990
data = tax[filt1,  ]
View(data)
filt1 = tax$year>=1990 & tax$`Country Code`== 'CHN' | tax$`Country Code`== 'BRA' | tax$`Country Code`== 'ZAF' | tax$`Country Code`== 'IND' | tax$`Country Code`== 'RUS'
data = tax[filt1,  ]
View(data)
filt1 = tax$year>=1990 & (tax$`Country Code`== 'CHN' | tax$`Country Code`== 'BRA' | tax$`Country Code`== 'ZAF' | tax$`Country Code`== 'IND' | tax$`Country Code`== 'RUS')
data = tax[filt1,  ]
plot(data$tax)
plot(data$tax, type = 'l')
plot(data$tax['BRA'], type = 'l')
View(data)
library(foreign)
coplot(y ~ year|`Country Code`, type="l", data=data) # Lines
coplot(tax ~ year|`Country Code`, type="l", data=data) # Lines
scatterplot(tax ~ year|`Country Code`, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=data)
library(car)
install.packages('car')
library(car)
scatterplot(tax ~ year|`Country Code`, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=data)
windows()
scatterplot(tax ~ year|`Country Code`, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=data)
scatterplot(tax ~ year|`Country Code`, boxplots=FALSE, smooth=F, reg.line=FALSE, data=data)
scatterplot(tax ~ year|`Country Code`, boxplots=FALSE, smooth=T, reg.line=FALSE, data=data)
plot(tax ~ year|`Country Code`, boxplots=FALSE, smooth=T, reg.line=FALSE, data=data)
factor(data$`Country Code`)
plot(data$tax, factor(data$`Country Code`))
plot(factor(data$`Country Code`), data$tax )
plot(factor(data$`Country Code`), data$tax, data$year )
plot(factor(data$`Country Code`), data$tax, data$year )
v = ggplot(data=data, aes(x=tax))
windows()
v + geom_line(binwidth=10, colour='black') + facet_grid(genre)
v + geom_line(binwidth=10, colour='black') + facet_grid(factor(data$`Country Code`))
windows()
v + geom_line(binwidth=10, colour='black') +
facet_grid(factor(data$`Country Code`))
v +
geom_line(binwidth=10, aes(year) ,colour='black') +
facet_grid(factor(data$`Country Code`))
v = ggplot(data=data, aes(x=tax, y=year))
v +
geom_line(binwidth=10,colour='black') +
facet_grid(factor(data$`Country Code`))
v = ggplot(data=data, aes(x=year, y=tax))
windows()
v +
geom_line(binwidth=10,colour='black') +
facet_grid(factor(data$`Country Code`))
plot(factor(data$`Country Code`), data$tax)
summary(data)
summary(factor(data$`Country Code`))
summary(data$factor(data$`Country Code`))
summary(data[factor(data$`Country Code`), "tax"])
summary(data[factor(data$`Country Code`), data$tax])
summary(data$tax])
summary(data$tax)
table(data)
table(data, tax)
table(data, data$tax)
summary(data$tax['Country Code'=='BRA'])
summary(data$tax[`Country Code´=='BRA'])
summary(data$tax[`Country Code´=='BRA'])
summary(data$tax[`Country Code´=='BRA', ])
summary(data$tax[`Country Code´=='BRA', ])
summary(data$tax[`Country Code´=='BRA', ])
BUCET
summary( data$tax )
summary( data$tax )
summary( data$tax )
summary( data$tax )
summary( data$tax )
summary( data$tax )
summary( data$tax )
)}
KKK
,
,
]
]
[][]
}}}
)
plot(tax)
plot(tax)
plot(tax)
plot(tax)
plot(tax)
plot(tax)
plot(tax)
source('~/.active-rstudio-document', echo=TRUE)
table
''
''
''
''
summary( data$tax )
summary.factor( data$tax )
summary.factor( data )
summary.factor( data, maxsum = 5 )
tapply(data$tax, data$`Country Code`, summary)
tapply(data$tax, data$`Country Code`, plot)
par(mfrow=c(2, 3))
tapply(data$tax, data$`Country Code`, plot)
a = plot()
par(mfrow=c(2, 3))
tapply(data$tax, data$`Country Code`, plot(type=l))
par(mfrow=c(2, 3))
tapply(data$tax, data$`Country Code`, plot(type='l'))
tapply(data$tax, data$`Country Code`, plot)
par(mfrow=c(2, 3))
tapply(data$tax, data$`Country Code`, plot)
plot(tapply(data$tax, data$`Country Code`))
par(mfrow=c(2, 3))
plot(tapply(data$tax, data$`Country Code`))
plot(tapply(data$tax, data$`Country Code`), type = 'l')
tapply(data$tax, data$`Country Code`, plot)
par(mfrow=c(2, 3))
tapply(data$tax, data$`Country Code`, plot)
tapply(data$tax ~ data$year, data$`Country Code`, plot)
tapply(data$tax, data$`Country Code`, plot(data$tax ~ data$year))
par(mfrow=c(2, 3))
tapply(data$tax, data$`Country Code`, plot(data$tax ~ data$year))
par(mfrow=c(1, 1))
tapply(data$tax, data$`Country Code`,
plot(data$tax ~ data$year, type= 'l'))
par(mfrow=c(1, 1))
tapply(data$tax, data$`Country Code`,
plot(data$tax ~ data$year, type= 'l'))
par(mfrow=c(1, 1))
tapply(data$tax, data$`Country Code`,
plot( type= 'l'))
par(mfrow=c(2, 3))
tapply(data$tax, data$`Country Code`,
plot)
tapply(data$tax, data$`Country Code`, summary)
plot(factor(data$`Country Code`), data$tax)
plot(factor(data$`Country Code`), data$tax)
plot(tax, year, data=data)
View(data)
plot(tax, year, data=data)
plot(data$tax, data$year)
data$tax['BRA']
data$tax['BRA', ]
data$tax['BRA']
data['BRA', tax ]
data['BRA', 'tax' ]
data['BRA', tax]
data[1:5, tax]
data[1:5, 'tax']
data[1:10, 'tax']
View(data)
f2 = data$`Country Code`== 'BRA'
data[f2, 'tax']
plot(data[f2, 'tax'], data$year)
bra = data[f2, 'tax']
View(bra)
data[f2, 'tax']
plot(data[f2, 'tax'], data$year)
plot(data[f2, 'tax'], data$year, type= 'l')
plot(bra, data$year, type= 'l')
plot(data$tax, data$year)
plot(bra, type= 'l')
plot(data[f2, 'tax'], type= 'l')
plot(data[f2, 'tax'], type= 'l')
plot(data[f2, 'tax'], type= 'l')
plot(data[f2, 'tax'], type= 'l')
plot(data[f2, 'tax'], type= 'l')
plot(data[f2, 'tax'], type= 'l')
plot(data[f2, 'tax'], type= 'l')
bra
bra
plot(bra)
View(bra)
plot(data$year, bra)
plot(data$year, data[f2, 'tax'])
plot(data[f2, 'year'], data[f2, 'tax'])
ano = data[f2, 'year']
View(ano)
plot(ano, bra)
plot(ano, bra)
plot(bra)
plot(bra, ano)
plot(ano)
plot(, ano)
plot(bra, ano)
plot(bra, ano)
View(bra)
plot(bra$tax, ano)
plot(bra$tax, ano$year)
plot(bra$tax, ano$year, type = 'l')
plot(ano$year,  bra$tax , type = 'l')
plot(ano$year,  bra$tax ,
type = 'l',
xlab = 'Year',
ylab = 'Tax revenue')

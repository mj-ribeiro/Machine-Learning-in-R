gpg = round(FieldGoals/Games, 1)   #goals per game
mean(gpg)
mean(gpg['KobeBryant', ])
std(gpg['KobeBryant', ])
sd(gpg['KobeBryant', ])
max(gpg['KobeBryant', ])
which(gpg %in% max(gpg['KobeBryant', ]))
max(gpg['KobeBryant', ])
# Statistics of KobeBryant
gpg
gpg['KobeBryant', 1]
colnames(gpg['KobeBryant', 1])
colnames(gpg)
colnames(gpg[1])
colnames(gpg[ ,1])
colnames(gpg[1])
colnames(gpg[1,1])
colnames(gpg)
r = colnames(gpg)
r[1]
# Statistics of KobeBryant
gpg
plot(MinutesPlayed['KobeBryant', ], Salary[['KobeBryant', ]] )
plot(MinutesPlayed['KobeBryant', ], Salary['KobeBryant', ] )
reg = lm.fit(MinutesPlayed['KobeBryant', ], Salary['KobeBryant', ] )
reg = lm(MinutesPlayed['KobeBryant', ]~ Salary['KobeBryant', ])
summary(reg)
reg = lm(Salary['KobeBryant', ] ~ MinutesPlayed['KobeBryant', ])
summary(reg)
plot(Salary['KobeBryant', ] ~ MinutesPlayed['KobeBryant', ])
reg2 = lm(Salary['KobeBryant', ] ~ Points['KobeBryant', ])
summary(reg2)
matplot(t(FieldGoals))
matplot(t(FieldGoals), type = 'b')
matplot(t(FieldGoals), type = 'b', pch = 15:18)
matplot(t(FieldGoals), type = 'b', pch = 15:18, col=c(1:4, 6))
c(1:4, 6)
windows()
matplot(t(FieldGoals), type = 'b', pch = 15:18, col=c(1:4, 6))
windows()
matplot(t(FieldGoals), type = 'b', pch = 15:18, col=c(1:4, 6))
legend('bottomleft', inset=0.01, legend = Players,col=c(1:4, 6), horiz = F )
windows()
matplot(t(FieldGoals), type = 'b', pch = 14:17, col=c(1:4, 6))
legend('bottomleft', inset=0.01, legend = Players, pch=14:17, col=c(1:4, 6), horiz = F )
windows()
matplot(t(FieldGoals/Salary), type = 'b', pch = 14:17, col=c(1:4, 6))
legend('bottomleft', inset=0.01, legend = Players, pch=14:17, col=c(1:4, 6), horiz = F )
x = c(1, 44, 6, 33, 0, 1)
x[c(1:3)]
x[c(1,3)]
Games
Games[1:3, 1:6]
Games[c(5, 10), c(9, 10)]
Games[ , c('2008', '2011')]
Games[ c('KobeBryant ', 'ChrisBosh ') , c('2008', '2011')]
Games[ c('KobeBryant', 'ChrisBosh') , c('2008', '2011')]
Games[1, 1:6]
Games[1, 1:6, drop=FALSE]
## Graphs
data = MinutesPlayed[c(1:3), ]
matplot(t(data), type = 'b', pch = 14:17, col=c(1:4, 6))
legend('bottomleft', inset=0.01, legend = Players, pch=14:17, col=c(1:4, 6), horiz = F )
data
matplot(t(data), type = 'b', pch = 14:17, col=c(1:4, 6))
legend('bottomleft', inset=0.01, legend = Players, pch=14:17, col=c(1:4, 6), horiz = F )
matplot(t(data), type = 'b', pch = 14:17, col=c(1:4, 6))
legend('bottomleft', inset=0.01, legend = Players[1:3], pch=14:17, col=c(1:4, 6), horiz = F )
myplot = function(){
data = MinutesPlayed[c(1:3), ]
matplot(t(data), type = 'b', pch = 14:17, col=c(1:4, 6))
legend('bottomleft', inset=0.01, legend = Players[1:3], pch=14:17, col=c(1:4, 6), horiz = F )
}
myplot()
myplot()
myplot = function(rows){                               # I create function myplot
data = MinutesPlayed[rows, , drop=FALSE]
matplot(t(data), type = 'b', pch = 14:17, col=c(1:4, 6))
legend('bottomleft', inset=0.01, legend = Players[rows], pch=14:17, col=c(1:4, 6), horiz = F )
}
myplot(3)
myplot(1)
myplot(5)
myplot(4:5)
myplot(41:5)
myplot(1:5)
myplot = function(rows, data){                               # I create function myplot
Data = data[rows, , drop=FALSE]
matplot(t(Data), type = 'b', pch = 14:17, col=c(1:4, 6))
legend('bottomleft', inset=0.01, legend = Players[rows], pch=14:17, col=c(1:4, 6), horiz = F )
}
myplot = function(rows, data){                               # I create function myplot
Data = data[rows, , drop=FALSE]
matplot(t(Data), type = 'b', pch = 14:17, col=c(1:4, 6))
legend('bottomleft', inset=0.01, legend = Players[rows], pch=14:17, col=c(1:4, 6), horiz = F )
}
myplot(1:5, Games)
myplot(1:2, gpg)
myplot(1:4, gpg)
myplot = function(rows=1:10, data){                               # I create function myplot
Data = data[rows, , drop=FALSE]
matplot(t(Data), type = 'b', pch = 14:17, col=c(1:4, 6))
legend('bottomleft', inset=0.01, legend = Players[rows], pch=14:17, col=c(1:4, 6), horiz = F )
}
myplot(1:4, gpg)
myplot(1:4, gpg)
myplot( gpg)
myplot( ,gpg)
myplot(2 ,gpg)
myplot = function(data, rows=1:10){                               # I create function myplot
Data = data[rows, , drop=FALSE]
matplot(t(Data), type = 'b', pch = 14:17, col=c(1:4, 6))
legend('bottomleft', inset=0.01, legend = Players[rows], pch=14:17, col=c(1:4, 6), horiz = F )
}
myplot(gpg)
myplot(Salary)
windows()
myplot(Salary)
myplot(Salary/Games)
r = rcauchy(500)
hist(r)
r = rcauchy(5000)
hist(r)
r = rcauchy(500)
f = function(y){-sum(log(1+(x-y)^2))}
f = function(y){-sum(log(1+(x-y)^2))}
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-10,10),max=T)$max}
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-10,10))$max}
mi
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-10,10), max=T)$max}
?optimise
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-10,10), upper = max(T)$max}
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-10,10), upper = max(T))
mi
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-10,10), upper = max(T))
}
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-10,10), upper = max(T))
}
mi
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-2,10), upper = max(T))
}
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-2,10))
}
for (i in 1:500){
x=xm[1:i]
mi=optimise(f,interval=c(-10,10),max=T)$max}
}
xm=rcauchy(500)
f=function(y){-sum(log(1+(x-y)^2))}
for (i in 1:500){
x=xm[1:i]
mi=optimise(f,interval=c(-10,10),max=T)$max}
mi
for (i in 1:500){
x=xm[1:i]
mi=optimise(f,interval=c(-10,10))$max}
mi
for (i in 1:500){
x=xm[1:i]
mi=optimise(f,interval=c(-10,10), max=T)$max}
mi
xm=rcauchy(500)
f=function(y){-sum(log(1+(x-y)^2))}
for (i in 1:500){
x=xm[1:i]
mi=optimise(f,interval=c(-10,10), max=T)$max}
mi
numeric(10)
numeric(12)
reticulate::repl_python()
import numpy
reticulate::repl_python()
import numpy
yes
import numpy
y
SELECT 1
create database mj;
y
SELECT 1
create database mj;
numeric(12)
r', 'mt')
price = c(100, 30, 60, 110, 90
v1 = c( 'car', 'mt', 'mt', 'car', 'mt')
price = c(100, 30, 60, 110, 90)
v1 = c( 'car', 'mt', 'mt', 'car', 'mt')
df = data.frame(v1, price)
df[v1=='mt', ]
df[v1=='mt' ]
mtdf = df$v1 == 'mt'
df[mtdf, ]
install.packages(kfilter)
install.packages(sspir)
install.packages(KalmanLike)
install.packages('KalmanLike')
library(KalmanLike)
install.packages(dse1)
install.packages("KalmanLike")
x = rnorm(1000)
m1 = arima(x, c(1,0,1))
m1 = arima(x, c(1,0,0))
summary(m1)
m1
m2 = garch(x, order=c(1,1))
install.packages("fGarch")
library(fGarch)
m2 = garch(x, order=c(1,1))
install.packages(fSeries)
install.packages(TimeSeries)
install.packages(timeSeries)
install.packages('timeSeries')
install.packages("timeSeries")
library(timeSeries)
m2 = garch(x, order=c(1,1))
library(fGarch)
detach("package:fBasics", unload = TRUE)
m2 = garch(x, order=c(1,1))
m2 = garchfit(x, order=c(1,1))
m2 = garchFit(x, order=c(1,1))
garchFit(~ garch(1,1), data = x, trace = FALSE)
basicStats(x)
31828+2328.57
33106-2328.57
33106+9029
33106+9029+16398.89
x = rnorm(100)
y = rbinom(100)
y = rpois(100, 2)
reg = lm(y~x)
View(reg)
summary(reg)
anova(reg)
reg$model
resid = reg$residuals
arima(resid, order = c(1,0,1))
reg2=arima(resid, order = c(1,0,1))
View(reg2)
reg$aic
reg2$aic
reg2$mask
reg2$model
anova(reg)
shapiro.test(resid)
hist(resid)
hist(resid, colour='green')
hist(resid, colours='green')
hist(resid, col='green')
hist(resid, col='green')
hist(resid, col='green')
windows()
hist(resid, col='green')
hist(resid, col='green',
xlab = 'Resíduo',
ylab = 'Frequência',
main = 'Histograma dos resíduos')
library(ggplot2)
p = ggplot(data=x, aes(x=x), colour='green')
df = data.frame(x, y)
p = ggplot(data=df, aes(x=x), colour='green')
p + geom_histogram()
p + geom_histogram( colour='green')
p = ggplot(data=df, aes(x=x, colour='green'))
p + geom_histogram( colour='black')
p + geom_histogram(bins=10, colour='black')
p = ggplot(data=df, aes(x=x, colour='blue'))
p + geom_histogram(bins=10, colour='black')
p + geom_histogram(bins=10, colour='black')
p = ggplot(data=df, aes(x=x, colours='blue'))
p + geom_histogram(bins=10, colour='black')
p + geom_histogram(bins=10, colour='black')
p = ggplot(data=df, aes(x=x),  colour='blue')
p + geom_histogram(bins=10, colour='black')
p + geom_histogram(bins=10, colour='black')
p + geom_histogram(bins=10, colour='blue')
p + geom_histogram(bins=10, colour='black', fill='blue')
p + geom_histogram(bins=10, colour='black', fill='green')
p + geom_histogram(bins=10, colour='black', fill='green', probability=T)
p + geom_histogram(bins=10, colour='black',
fill='green',
xlab('Variável x'))
p + geom_histogram(bins=10, colour='black',
fill='green',
)+xlab('Variável x')
p + geom_histogram(bins=10, colour='black',
fill='green',
) + xlab('Resíduo')+
ylab('Frequência')
hist(resid, col='green',
xlab = 'Resíduo',
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
bin = 10,
col  = 'green',
xlab = 'Resíduo',
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
col  = 'green',
xlab = 'Resíduo',
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
col  = 'green',
xlab = 'Resíduo',
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
col  = 'green',
xlab = 'Resíduo',
ylab = 'Frequência',
main = 'Histograma dos resíduos')
p + geom_histogram(bins=10, colour='black',
fill='green',
) + xlab('Resíduo')+
ylab('Frequência')
shapiro.test(resid)
x = rnorm(100)
shapiro.test(x)
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
resid = reg$residuals
shapiro.test(resid)
hist(resid,
col  = 'green',
xlab = substitute(gama),
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
col  = 'green',
xlab = substitute(gamma),
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
col  = 'green',
xlab = substitute(gamma_t),
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
col  = 'green',
xlab = substitute(gamma_{t}),
ylab = 'Frequência',
main = 'Histograma dos resíduos')
library(fGarch)
volatility(resid, type='sigma')
volatility(resid, type='sigma')
vol = volatility(resid, type='sigma')
plot(vol)
plot(vol, color='blue')
plot(vol,col('blue') )
plot(vol,col='blue' )
plot(vol,col='blue', fill='blue' )
?plot
plot(vol,col='blue')
library(fBasics)
assetReturns <- 100 * LPP2005REC[, 1:6]
names(assetReturns)
library(fBasics)
assetReturns <- 100 * LPP2005REC[, 1:6]
names(assetReturns)
head(assetReturns)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
library(fBasics)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
weights = portfolioFrontier(assetReturns, nPoints = 20)
print(weights)
print(weights)
names(assetReturns)
weights = portfolioFrontier(assetReturns, nPoints = 20)
remove.packages("fBasics", lib="~/R/win-library/3.6")
remove.packages("fGarch", lib="~/R/win-library/3.6")
library(tseries)
garchoutput <- garch(y,order=c(2,3))
x = rnorm(100)
y = rpois(100, 2)
garchoutput <- garch(y,order=c(2,3))
garchoutput <- garch(y,order=c(1,0))
View(garchoutput)
garchoutput$coef
summary(garchoutput)
summary(garchoutput)
4.4*1.3
533.5/5
5* 107.99
455.48 + 2.28
457.76/455.48-1=r
r=457.76/455.48-1
100*r
(1+0.045)^(1/12)
1.003675-1
(1.003675-1)*100
create table prod
(id int(11)auto_increment not null,
nome varchar(50) not null,
valor decimal(9,6) not null
primary key (id)
)
x =swiss[,-1]
View(x)
setwd("D:/Git projects/ML in R")
df = read.csv('credit.csv')
df$clientid = NULL
attach(df)
summary(df)
library(fBasics)
basicStats(df)
count(df, age<0)
table(age)
f1 = age<0
table(f1)
df[age <0 & !is.na, ]
df[age <0 & !is.na(age), ]
df = df[age>0, ]
df[age <0 & !is.na(age),  ]
summary(df)
f1 = age<0
table(f1)   #there are three values less than three
df = df[df$age>0, ]
f1 = age<0
table(f1)   #there are three values less than three
View(df)
f1 = age<0 & is.na(age)
table(f1)   #there are three values less than three
df[age <0 & !is.na(age),  ]
summary(df)
mean(age)
mean(age, rm.na=T)
mean(age, na.rm=T)
mean(df[age>0], na.rm = T)
mean(age[age>0 ], na.rm = T)
m_age = mean(age[age>0 ], na.rm = T)  # average without considering negative values
age = if (age<0){
age = m_age
}else{
age = age
}
df$age = if (age<0){
age = m_age
}else{
age = age
}
df$age = if (age<0){
df$age = m_age
}else{
df$age = df$age
}
summary(df$age)
df$age = if (df$age<0 & df$age==NA ){
df$age = m_age
}else{
df$age = df$age
}
summary(df$age)
df$age = if (df$age<0 & df$age == NA){
df$age = m_age
}else{
df$age = df$age
}
summary(df$age)
rm(age)
summary(df$age)
df$age = ifelse(df$age<0, m_age, df$age)
summary(df$age)
df$age = ifelse(df$age==NA, m_age, df$age)
summary(df$age)
View(df)
df = read.csv('credit.csv')
df$clientid = NULL
df$age = ifelse(df$age<0, m_age, df$age)
summary(df$age)

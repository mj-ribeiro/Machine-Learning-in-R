names(bvcore)[4] = "IBOV"
View(bvcore)
bvcore[1: , 4]
bvcore[1:4, 4]
rm(ret)
bvcore[1:2505, 4]
IBOV = bvcore[1:2505, 4]
View(IBOV)
rm(IBOV)
bvcore <- bvcore[ ,4, drop=FALSE]
View(bvcore)
bvcore
bvcore[1]
bvcore[1]
bvcore[1]
bvcore[1]
bvcore[1:2]
bvcore[1:2, 1]
bvcore[1:1, 1]
bvcore[1, 1]
bvcore[2, 1]
bvcore[3, 1]
bvcore[3, 1]/bvcore[2, 1]
log(bvcore[3, 1]/bvcore[2, 1])
for (i in 1:n) {
if (i+1 < n){
bvcore$ret = log(bvcore[i+1, 1]/bvcore[i, 1])
}
}
View(bvcore)
for (i in 1:n) {
#if (i+1 < n){
bvcore$ret = log(bvcore[i+1, 1]/bvcore[i, 1])
}
View(bvcore)
for (i in 1:n){
print(i)
}
for (i in 1:n){
print(i)
}
log(bvcore[3, 1]/bvcore[2, 1])
log(bvcore[4, 1]/bvcore[3, 1])
for (i in 1:n) {
#if (i+1 < n){
bvcore$ret[i+1] = log(bvcore[i+1, 1]/bvcore[i, 1])
}
View(bvcore)
plot(bvcore[, 2])
plot(bvcore[ , 2], type='l')
plot(bvcore[ , 2], type='l', col='blue')
plot(bvcore[ , 2], type='l',
col='blue', ylab='Returns of IBOVESPA',
)
plot(bvcore[ , 2], type='l',
col='blue', ylab='Returns of IBOVESPA',
main='Evolution of Ibovespa returns')
shapiro.test(bvcore[ , 2])
View(bvcore)
plot(bvcore[ , 2], dates, type='l',
col='blue', ylab='Returns of IBOVESPA',
main='Evolution of Ibovespa returns')
plot(dates,bvcore[ , 2], type='l',
col='blue', ylab='Returns of IBOVESPA',
main='Evolution of Ibovespa returns')
hist(bvcore[ , 2])
hist(bvcore[ , 2], col = 'lightblue')
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns')
shapiro.test(bvcore[ , 2])
shapiro.test(bvcore[ , 2]) #The null-hypothesis of this test is that the population is normally distributed.
jarque.bera.test(bvcore[ , 2])
jarque.bera.test(omit.na(bvcore[ , 2]))
jarque.bera.test(na.omit(bvcore[ , 2]))
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns')curve(dnorm(x),add=T)
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns')
curve(dnorm(x),add=T)
hist(rnorm(1000))
curve(dnorm(x),add=T)
hist(rnorm(1000))
curve(dnorm(x),add=T)
hist(rnorm(1000), ylim=c(0,0.5))
curve(dnorm(x),add=T)
hist(rnorm(1000), probability = T)
curve(dnorm(x),add=T)
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns', probability = T)
curve(dnorm(x),add=T)
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns')
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns', density = T)
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns', probability = T)
curve(dnorm(x),add=T)
basicStats(bvcore[ , 2])
t.test(bvcore[ , 2], mu=0)
adf.test(bvcore[ , 2])
adf.test(na.omit(bvcore[ , 2]))
adf.test(na.omit(bvcore[ , 2]) )
bvcore[ , 2] = ifelse(is.na(bvcore[ , 2]), mean(bvcore[ , 2], na.rm=T ), bvcore[ , 2])
View(bvcore)
basicStats(bvcore[ , 2])
vol = garchFit(bvcore[ , 2] ~garch(1, 1), trace = FALSE)
summary(vol)
basicStats(bvcore[ , 2])
summary(vol)
fit =  fitted(vol)
plot(fit, type='l', col='blue', ylab='Volatilidade',
main='Volatilidade do IBOV usando o GARCH(1,1)')
plot(fit, type='l', col='blue', ylab='Volatilidade',
main='IBOV volatility using GARCH(1,1)')
ar = auto.arima(bvcore[ , 2], lambda = 'auto')
fit = forecast(ar, h=10)
plot(fit)
ar = auto.arima(bvcore[ , 2], lambda = 'auto')
fit = forecast(ar, h=30)
plot(fit)
library(mFilter)
filt = hpfilter(bvcore[ , 2])
filt = hpfilter(bvcore[ , 2], freq = 1600)
plot(filt)
#----------- ARIMA
acf(bvcore[ , 2])
pacf(bvcore[ , 2])
par(mfrow=c(1,2))
acf(bvcore[ , 2])
pacf(bvcore[ , 2])
acf(bvcore[ , 2], main='Return IBOV')
#----------- ARIMA
par(mfrow=c(1,2))
acf(bvcore[ , 2], main='Autocorrelation of IBOV returns')
pacf(bvcore[ , 2], main='Partial autocorrelation of IBOV returns')
#----------- ARIMA
window()
#----------- ARIMA
windows()
windows()
par(mfrow=c(1,2))
acf(bvcore[ , 2], main='Autocorrelation of IBOV returns')
pacf(bvcore[ , 2], main='Partial autocorrelation of IBOV returns')
ar = auto.arima(bvcore[ , 2], lambda = 'auto')
ar
54.5+543.95
54.5+543.95+1.55
1000*1.05
1000*0.05
setwd("D:/Git projects/ML in R")
library(rpart)
library(rpart.plot)
library(fBasics)
library(caTools)  # split data
library(caret)    #provide metrics for confusion matrix
df = read.csv('credit.csv')
df$clientid = NULL
attach(df)
View(df)
m_age = mean(age[age>0 ], na.rm = T)  # average without considering negative values
df$age = ifelse(df$age < 0 |is.na(df$age) , m_age, df$age)
df[ ,1:3] = scale(df[, 1:3])
df$default = factor(df$default, levels = c(0,1))
set.seed(1)
div = sample.split(df$income, SplitRatio = 0.75)
df_train = subset(df, div == TRUE)
df_test = subset(df, div == FALSE)
alt = c(1.4, 1.35, 2, 1.6, 1.9, 1.82, 1.67)
sx = c('m', 'f', 'm', 'f', 'm', 'm', 'f')
fator_sx = factor(sx)
SX
sx
factor_sx
fator_sx
fator_sx = factor(sx, levels = c(0,1))
fator_sx
rm(sx)
rm(fator_sx)
rm(alt)
install.packages('randomForests')
install.packages('randomForest')
library(randomForest)
search()
df_train[1:3, -4]
df_train[-4]
df_train[4]
df_train[1:2, 4]
df_train[1:4, 4]
clas = randomForest(x=df_train[-4], df_train[4], ntree = 10, )
clas = randomForest(x=df_train[-4], y = df_train[4], ntree = 10, )
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10, )
df_train$default
df_train[4]
prev = predict(clas, newdata = df_test[-4])
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 10)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 15)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 15)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 15)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 15)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 15)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 15)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 15)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 40)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 40)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 40)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 40)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 40)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 40)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 40)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 40)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 40)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 40)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 40)
prev = predict(clas, newdata = df_test[-4])
#---------- Confusion matrix
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
set.seed(1)
clas = randomForest(x=df_train[-4], y = df_train$default, ntree = 40)
prev = predict(clas, newdata = df_test[-4])
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
conf_matrix = table(df_test[ , 4], prev)
conf_matrix
confusionMatrix(conf_matrix)
#---------------------------------------------------------------------------------
#                             Random Forests
#---------------------------------------------------------------------------------
setwd("D:/Git projects/ML in R")
library(rpart)
library(rpart.plot)
library(fBasics)
library(caTools)  # split data
library(caret)    #provide metrics for confusion matrix
base = read.csv('census.csv')
base$X = NULL
attach(base)
rm(age)
rm(income)
base = read.csv('census.csv')
base$X = NULL
attach(base)
base$sex = factor(base$sex, levels = unique(base$sex), labels = c(1, 0))
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
base[ , 1] = scale(base[ , 1])
base[ , 3] = scale(base[ , 3])
base[ , 5] = scale(base[ , 5])
base[ , 11:13] = scale(base[ , 11:13])
set.seed(1)
div = sample.split(base$income, SplitRatio = 0.85)
base_train = subset(base, div == T)
base_test = subset(base, div == F)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 10)
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 10)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(prev)
conf_matrix
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 10)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 10)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 10)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 20)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 20)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 20)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 60)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 60)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 60)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 80)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 80, matry=14)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 80, matry=14)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 80, matry=9)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
#set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 80, matry=9)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)
#set.seed(1)
clas = randomForest(x=base_train[-15], y = base_train$income, ntree = 80, matry=9)
prev = predict(clas, newdata = base_test[-15])
conf_matrix = table(base_test[ ,15], prev)
conf_matrix
confusionMatrix(conf_matrix)

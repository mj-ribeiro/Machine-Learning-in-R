x=r[1:i]
mi=optimise(f,interval=c(-10,10), max=T)$max}
?optimise
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-10,10), upper = max(T)$max}
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-10,10), upper = max(T))
mi
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-10,10), upper = max(T))
}
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-10,10), upper = max(T))
}
mi
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-2,10), upper = max(T))
}
for (i in 1:500){
x=r[1:i]
mi=optimise(f,interval=c(-2,10))
}
for (i in 1:500){
x=xm[1:i]
mi=optimise(f,interval=c(-10,10),max=T)$max}
}
xm=rcauchy(500)
f=function(y){-sum(log(1+(x-y)^2))}
for (i in 1:500){
x=xm[1:i]
mi=optimise(f,interval=c(-10,10),max=T)$max}
mi
for (i in 1:500){
x=xm[1:i]
mi=optimise(f,interval=c(-10,10))$max}
mi
for (i in 1:500){
x=xm[1:i]
mi=optimise(f,interval=c(-10,10), max=T)$max}
mi
xm=rcauchy(500)
f=function(y){-sum(log(1+(x-y)^2))}
for (i in 1:500){
x=xm[1:i]
mi=optimise(f,interval=c(-10,10), max=T)$max}
mi
numeric(10)
numeric(12)
reticulate::repl_python()
import numpy
reticulate::repl_python()
import numpy
yes
import numpy
y
SELECT 1
create database mj;
y
SELECT 1
create database mj;
numeric(12)
r', 'mt')
price = c(100, 30, 60, 110, 90
v1 = c( 'car', 'mt', 'mt', 'car', 'mt')
price = c(100, 30, 60, 110, 90)
v1 = c( 'car', 'mt', 'mt', 'car', 'mt')
df = data.frame(v1, price)
df[v1=='mt', ]
df[v1=='mt' ]
mtdf = df$v1 == 'mt'
df[mtdf, ]
install.packages(kfilter)
install.packages(sspir)
install.packages(KalmanLike)
install.packages('KalmanLike')
library(KalmanLike)
install.packages(dse1)
install.packages("KalmanLike")
x = rnorm(1000)
m1 = arima(x, c(1,0,1))
m1 = arima(x, c(1,0,0))
summary(m1)
m1
m2 = garch(x, order=c(1,1))
install.packages("fGarch")
library(fGarch)
m2 = garch(x, order=c(1,1))
install.packages(fSeries)
install.packages(TimeSeries)
install.packages(timeSeries)
install.packages('timeSeries')
install.packages("timeSeries")
library(timeSeries)
m2 = garch(x, order=c(1,1))
library(fGarch)
detach("package:fBasics", unload = TRUE)
m2 = garch(x, order=c(1,1))
m2 = garchfit(x, order=c(1,1))
m2 = garchFit(x, order=c(1,1))
garchFit(~ garch(1,1), data = x, trace = FALSE)
basicStats(x)
31828+2328.57
33106-2328.57
33106+9029
33106+9029+16398.89
x = rnorm(100)
y = rbinom(100)
y = rpois(100, 2)
reg = lm(y~x)
View(reg)
summary(reg)
anova(reg)
reg$model
resid = reg$residuals
arima(resid, order = c(1,0,1))
reg2=arima(resid, order = c(1,0,1))
View(reg2)
reg$aic
reg2$aic
reg2$mask
reg2$model
anova(reg)
shapiro.test(resid)
hist(resid)
hist(resid, colour='green')
hist(resid, colours='green')
hist(resid, col='green')
hist(resid, col='green')
hist(resid, col='green')
windows()
hist(resid, col='green')
hist(resid, col='green',
xlab = 'Resíduo',
ylab = 'Frequência',
main = 'Histograma dos resíduos')
library(ggplot2)
p = ggplot(data=x, aes(x=x), colour='green')
df = data.frame(x, y)
p = ggplot(data=df, aes(x=x), colour='green')
p + geom_histogram()
p + geom_histogram( colour='green')
p = ggplot(data=df, aes(x=x, colour='green'))
p + geom_histogram( colour='black')
p + geom_histogram(bins=10, colour='black')
p = ggplot(data=df, aes(x=x, colour='blue'))
p + geom_histogram(bins=10, colour='black')
p + geom_histogram(bins=10, colour='black')
p = ggplot(data=df, aes(x=x, colours='blue'))
p + geom_histogram(bins=10, colour='black')
p + geom_histogram(bins=10, colour='black')
p = ggplot(data=df, aes(x=x),  colour='blue')
p + geom_histogram(bins=10, colour='black')
p + geom_histogram(bins=10, colour='black')
p + geom_histogram(bins=10, colour='blue')
p + geom_histogram(bins=10, colour='black', fill='blue')
p + geom_histogram(bins=10, colour='black', fill='green')
p + geom_histogram(bins=10, colour='black', fill='green', probability=T)
p + geom_histogram(bins=10, colour='black',
fill='green',
xlab('Variável x'))
p + geom_histogram(bins=10, colour='black',
fill='green',
)+xlab('Variável x')
p + geom_histogram(bins=10, colour='black',
fill='green',
) + xlab('Resíduo')+
ylab('Frequência')
hist(resid, col='green',
xlab = 'Resíduo',
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
bin = 10,
col  = 'green',
xlab = 'Resíduo',
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
col  = 'green',
xlab = 'Resíduo',
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
col  = 'green',
xlab = 'Resíduo',
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
col  = 'green',
xlab = 'Resíduo',
ylab = 'Frequência',
main = 'Histograma dos resíduos')
p + geom_histogram(bins=10, colour='black',
fill='green',
) + xlab('Resíduo')+
ylab('Frequência')
shapiro.test(resid)
x = rnorm(100)
shapiro.test(x)
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
resid = reg$residuals
shapiro.test(resid)
hist(resid,
col  = 'green',
xlab = substitute(gama),
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
col  = 'green',
xlab = substitute(gamma),
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
col  = 'green',
xlab = substitute(gamma_t),
ylab = 'Frequência',
main = 'Histograma dos resíduos')
hist(resid,
col  = 'green',
xlab = substitute(gamma_{t}),
ylab = 'Frequência',
main = 'Histograma dos resíduos')
library(fGarch)
volatility(resid, type='sigma')
volatility(resid, type='sigma')
vol = volatility(resid, type='sigma')
plot(vol)
plot(vol, color='blue')
plot(vol,col('blue') )
plot(vol,col='blue' )
plot(vol,col='blue', fill='blue' )
?plot
plot(vol,col='blue')
library(fBasics)
assetReturns <- 100 * LPP2005REC[, 1:6]
names(assetReturns)
library(fBasics)
assetReturns <- 100 * LPP2005REC[, 1:6]
names(assetReturns)
head(assetReturns)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
library(fBasics)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
tangencyPortfolio(assetReturns, riskFreeRate = 0)
weights = portfolioFrontier(assetReturns, nPoints = 20)
print(weights)
print(weights)
names(assetReturns)
weights = portfolioFrontier(assetReturns, nPoints = 20)
remove.packages("fBasics", lib="~/R/win-library/3.6")
remove.packages("fGarch", lib="~/R/win-library/3.6")
library(tseries)
garchoutput <- garch(y,order=c(2,3))
x = rnorm(100)
y = rpois(100, 2)
garchoutput <- garch(y,order=c(2,3))
garchoutput <- garch(y,order=c(1,0))
View(garchoutput)
garchoutput$coef
summary(garchoutput)
summary(garchoutput)
4.4*1.3
533.5/5
5* 107.99
455.48 + 2.28
457.76/455.48-1=r
r=457.76/455.48-1
100*r
(1+0.045)^(1/12)
1.003675-1
(1.003675-1)*100
create table prod
(id int(11)auto_increment not null,
nome varchar(50) not null,
valor decimal(9,6) not null
primary key (id)
)
x =swiss[,-1]
View(x)
setwd("D:/Git projects/ML in R")
df = read.csv('credit.csv')
df$clientid = NULL
attach(df)
summary(df)
library(fBasics)
basicStats(df)
f1 = age<0 & is.na(age)
table(f1)   #there are three values less than three
df[age <0 & !is.na(age),  ]
table(f1)   #there are three values less than three
f1 = age<0
table(f1)   #there are three values less than three
f1 = age<0 & is.na(age)
table(f1)   #there are three values less than three
View(f1)
f1 = age<0
View(f1)
f1 = age<0 & age == NA
table(f1)   #there are three values less than three
View(f1)
f1 = age<0 | age == NA
table(f1)   #there are three values less than three
View(f1)
rm(f1)
f1 = age<0 | age == NA
View(f1)
f1 = age<0 | is.na(age)
table(f1)   #there are three values less than three
View(f1)
df[age <0 & !is.na(age),  ]
df$age = if (df$age<0){
df$age = df$age*(-1)
}
View(df)
mean(age, na.rm=T)
m_age = mean(age[age>0 ], na.rm = T)  # average without considering negative values
df = df[df$age>0, ]
View(df)
setwd("D:/Git projects/ML in R")
df = read.csv('credit.csv')
df$clientid = NULL
attach(df)
library(fBasics)
summary(df)
basicStats(df)
f1 = age<0 | is.na(age)
table(f1)   #there are three values less than three and three NA's
df[age <0 & !is.na(age),  ]
mean(age, na.rm=T)
m_age = mean(age[age>0 ], na.rm = T)  # average without considering negative values
df$age = if (df$age<0){
df$age = df$age*(-1)
}
df = read.csv('credit.csv')
df$clientid = NULL
attach(df)
summary(df)
df$age = if (df$age<0){
df$age = df$age*(-1)
}else{
df$age = df$age
}
View(df)
if (df$age<0){
df$age = df$age*(-1)
}else{
df$age = df$age
}
View(df)
ifelse(c(T, F, T, F), 'BUCETA', 'PINTO')
ifelse(c(T, F, T, T), 'BUCETA', 'PINTO')
summary(df$age)
df$age = ifelse(df$age<0 | is.na(df$age), m_age, df$age)
m_age = mean(age[age>0 ], na.rm = T)  # average without considering negative values
df$age = ifelse(df$age<0 | is.na(df$age), m_age, df$age)
summary(df$age)
fBasics(age)
attach(df)
basicStats(age)
df = scale(df[ , 1:3])
View(df)
df = read.csv('credit.csv')
df$clientid = NULL
attach(df)
df = scale(df[ , 1:3]) + df[ , 4:4]
View(df)
df = read.csv('credit.csv')
df$clientid = NULL
attach(df)
df$age = ifelse(df$age<0 | is.na(df$age), m_age, df$age)
summary(df$age)
basicStats(age)
df$age = ifelse(df$age<0 | is.na(df$age), m_age, df$age)
basicStats(age)
df = df[df$age>0, ]
View(df)
df = read.csv('credit.csv')
df$clientid = NULL
attach(df)
summary(df)
df[age <0 & !is.na(age),  ]
m_age = mean(age[age>0 ], na.rm = T)  # average without considering negative values
df$age = ifelse(df$age<0 | is.na(df$age), m_age, df$age)
df[age <0 & !is.na(age),  ]
basicStats(age)
summary(df$age)
basicStats(df$age)
attach(df)
summary(age)
df[ , 1:3] = scale(df[ , 1:3])
View(df)
library(ggplot2)
g1 = ggplot(data=df, aes(x=loan, y=income))
g1+ geom_point(colour='blue')
setwd("D:/Git projects/ML in R")
df = read.csv('census.csv')
View(df)
attach(df)
summary(df)
table(native.country)
table(native.country)
df$x = NULL
View(df)
df$X = NULL
df$sex = ifelse(df$sex==' Male', 1, 0)
View(df)
table(sex)
table(df$sex)
attach(df)
df$sex = factor(df$sex, levels = unique(df$sex), labels = c(0, 1))
table(df$sex)
df$sex = factor(df$sex, levels = unique(df$sex), labels = c(1, 0))
table(df$sex)
unique(df$sex)
df = read.csv('census.csv')
df$X = NULL
df$sex = factor(df$sex, levels = unique(df$sex), labels = c(1, 0))
table(df$sex)
base$X = NULL
base = read.csv('census.csv')
base$X = NULL
source('D:/Git projects/ML in R/prep_data_census.R', echo=TRUE)
base$sex = factor(base$sex, levels = unique(base$sex), labels = c(1, 0))
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
View(base)
View(base)
View(base)
View(base)
View(base)
base[ , 1] = scale(base[ , 1])
View(base)
base[ , 3] = scale(base[ , 3])
base[ , 5] = scale(base[ , 5])
base[ , 11:13] = scale(base[ , 11:13])
setwd("D:/Git projects/ML in R")
source('D:/Git projects/ML in R/prep_data_credit.R', echo=TRUE)
install.packages('caTools')
library(caTools)
set.seed(1)
rm(base)
library(caTools)
set.seed(1)
div = sample.split(df$default, SplitRatio = 0.75)
df_train = subset(df, div == T)
df_test = subset(df, div == F)
df_test = subset(df, div == F)
source('D:/Git projects/ML in R/prep_data_credit.R', echo=TRUE)
source('D:/Git projects/ML in R/prep_data_census.R', echo=TRUE)
base$sex = factor(base$sex, levels = unique(base$sex), labels = c(1, 0))
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
base[ , 1] = scale(base[ , 1])
base[ , 3] = scale(base[ , 3])
base[ , 5] = scale(base[ , 5])
base[ , 11:13] = scale(base[ , 11:13])
View(base)
library(caTools)
set.seed(1)
div = sample.split(base$default, SplitRatio = 0.85)
df_train = subset(base, div == T)
df_test = subset(base, div == F)
div = sample.split(base$default, SplitRatio = 0.85)
div = sample.split(base$default, SplitRatio = 0.85)
div = sample.split(base$income, SplitRatio = 0.85)
df_train = subset(base, div == T)
df_test = subset(base, div == F)
rm(base_train, base_test)
rm(df_train, df_test)
base_train = subset(base, div == T)
base_test = subset(base, div == F)
View(base)
